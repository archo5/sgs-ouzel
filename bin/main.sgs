
function bind( t, f )
{
	return function() use( t, f )
	{
		f.apply( t, va_get_args() );
	};
}

ouzel.setAppAndDeveloperNames( "sgs-ouzel Samples", "org.sgscript" );
ouzel.setScreenSaverEnabled( false );
ouzel.window.title = "sgs-ouzel Samples";
ouzel.fileSystem.addResourcePath( "../ouzel/samples/Resources" );

ouzel.renderer.clearColor = ouzel.Color( 64, 0, 0 );

class MainMenu
{
	function __construct()
	{
		this.eventHandler = ouzel.createEventHandler().
		{
			onKeyboardEvent = bind( this, this.onKeyboardEvent ),
			onUIEvent = bind( this, this.onUIEvent ),
		};
		
		this.scene = ouzel.createScene();
		ouzel.sceneManager.scene = this.scene;
		
		this.layer = ouzel.createLayer();
		this.scene.addLayer( this.layer );
		
		this.camera = ouzel.createCamera();
		this.camera.scaleMode = ouzel.CameraScaleMode.SHOW_ALL;
		this.camera.targetContentSize = vec2(400, 600);
		this.layer.addChild( this.camera );
		
		this.menu = ouzel.createMenu();
		this.layer.addChild( this.menu );
		
		this.gitHubButton = ouzel.createButton( "button.png", "button_selected.png", "button_down.png", "", "GitHub", "arial.fnt", 0, ouzel.Color(20, 0, 0, 255), ouzel.Color.BLACK, ouzel.Color.BLACK );
		this.spritesButton = ouzel.createButton( "button.png", "button_selected.png", "button_down.png", "", "Sprites", "arial.fnt", 0, ouzel.Color(20, 0, 0, 255), ouzel.Color.BLACK, ouzel.Color.BLACK );
		this.guiButton = ouzel.createButton( "button.png", "button_selected.png", "button_down.png", "", "GUI", "arial.fnt", 0, ouzel.Color(20, 0, 0, 255), ouzel.Color.BLACK, ouzel.Color.BLACK );
		this.renderTargetButton = ouzel.createButton( "button.png", "button_selected.png", "button_down.png", "", "Render target", "arial.fnt", 0, ouzel.Color(20, 0, 0, 255), ouzel.Color.BLACK, ouzel.Color.BLACK );
		this.animationsButton = ouzel.createButton( "button.png", "button_selected.png", "button_down.png", "", "Animations", "arial.fnt", 0, ouzel.Color(20, 0, 0, 255), ouzel.Color.BLACK, ouzel.Color.BLACK );
		this.inputButton = ouzel.createButton( "button.png", "button_selected.png", "button_down.png", "", "Input", "arial.fnt", 0, ouzel.Color(20, 0, 0, 255), ouzel.Color.BLACK, ouzel.Color.BLACK );
		this.soundButton = ouzel.createButton( "button.png", "button_selected.png", "button_down.png", "", "Sound", "arial.fnt", 0, ouzel.Color(20, 0, 0, 255), ouzel.Color.BLACK, ouzel.Color.BLACK );
		this.perspectiveButton = ouzel.createButton( "button.png", "button_selected.png", "button_down.png", "", "Perspective", "arial.fnt", 0, ouzel.Color(20, 0, 0, 255), ouzel.Color.BLACK, ouzel.Color.BLACK );
		
		this.gitHubButton.position = vec2(0, 120);
		this.menu.addWidget( this.gitHubButton );
		
		this.spritesButton.position = vec2(0, 80);
		this.menu.addWidget( this.spritesButton );
		
		this.guiButton.position = vec2(0, 40);
		this.menu.addWidget( this.guiButton );
		
		this.renderTargetButton.position = vec2(0, 0);
		this.menu.addWidget( this.renderTargetButton );
		
		this.animationsButton.position = vec2(0, -40);
		this.menu.addWidget( this.animationsButton );
		
		this.inputButton.position = vec2(0, -80);
		this.menu.addWidget( this.inputButton );
		
		this.soundButton.position = vec2(0, -120);
		this.menu.addWidget( this.soundButton );
		
		this.perspectiveButton.position = vec2(0, -160);
		this.menu.addWidget( this.perspectiveButton );
	}
	function onKeyboardEvent( type, e )
	{
		if( e.key == ouzel.input.KeyboardKey.ESCAPE )
		{
			if( type == ouzel.EventType.KEY_PRESS )
			{
				ouzel.exit();
			}
			return false;
		}
		return true;
	}
	function onUIEvent( type, e )
	{
		if( type == ouzel.EventType.CLICK_NODE )
		{
			if( e.node === this.gitHubButton )
			{
				ouzel.openURL( "https://github.com/elnormous/ouzel" );
			}
			else if( e.node === this.spritesButton )
			{
				_G.curScene.eventHandler.dispose();
				_G.curScene = new SpritesSample();
			}
			else if( e.node === this.guiButton )
			{
				_G.curScene.eventHandler.dispose();
				_G.curScene = new GUISample();
			}
		}
		return true;
	}
}
class SpritesSample
{
	function __construct()
	{
		this.
		{
			eventHandler = ouzel.createEventHandler().
			{
				onGamepadEvent = bind( this, this.onGamepadEvent ),
				onUIEvent = bind( this, this.onUIEvent ),
				onKeyboardEvent = bind( this, this.onKeyboardEvent ),
			},
			
			scene = ouzel.createScene(),
			layer = ouzel.createLayer(),
			camera = ouzel.createCamera().
			{
				scaleMode = ouzel.CameraScaleMode.SHOW_ALL,
				targetContentSize = vec2( 800, 600 ),
			},
		};
		
		this.layer.addChild( this.camera );
		this.scene.addLayer( this.layer );
		
		// character
		this.
		{
			characterSprite = ouzel.createSprite(),
			character = ouzel.createNode().{ position = vec2( -300, 0 ) },
			move = ouzel.createMove( 4, vec2( 300, 0 ) ),
		};
		this.characterSprite.initFromFile( "run.json" );
		this.characterSprite.play( true );
		this.character.addComponent( this.characterSprite );
		this.layer.addChild( this.character );
		this.character.addComponent( this.move );
		this.move.start();
		
		// fire
		this.
		{
			fireSprite = ouzel.createSprite().{ offset = vec2( 0, 20 ) },
			fireNode = ouzel.createNode().{ position = vec2( -100, -140 ) },
		};
		this.fireSprite.initFromFile( "fire.json" );
		this.fireSprite.play( true );
		this.fireNode.addComponent( this.fireSprite );
		this.layer.addChild( this.fireNode );
		
		// triangle
		this.
		{
			triangleSprite = ouzel.createSprite(),
			triangleNode = ouzel.createNode().{ position = vec2( 100, -140 ) },
		};
		this.triangleSprite.initFromFile( "triangle.json" );
		this.triangleNode.addComponent( this.triangleSprite );
		this.layer.addChild( this.triangleNode );
		
		// GUI
		this.
		{
			guiCamera = ouzel.createCamera(),
			guiLayer = ouzel.createLayer(),
			menu = ouzel.createMenu(),
			
			hideButton = ouzel.createButton( "button.png", "button_selected.png", "button_down.png", "", "Show/hide", "arial.fnt", 0, ouzel.Color.BLACK, ouzel.Color.BLACK, ouzel.Color.BLACK ).
			{
				position = vec2( -200, 200 ),
			},
			wireframeButton = ouzel.createButton( "button.png", "button_selected.png", "button_down.png", "", "Wireframe", "arial.fnt", 0, ouzel.Color.BLACK, ouzel.Color.BLACK, ouzel.Color.BLACK ).
			{
				position = vec2( -200, 160 ),
			},
			backButton = ouzel.createButton( "button.png", "button_selected.png", "button_down.png", "", "Back", "arial.fnt", 0, ouzel.Color.BLACK, ouzel.Color.BLACK, ouzel.Color.BLACK ).
			{
				position = vec2( -200, -200 ),
			},
		};
		
		this.guiLayer.addChild( this.guiCamera );
		this.scene.addLayer( this.guiLayer );
		this.guiLayer.addChild( this.menu );
		this.menu.addWidget( this.hideButton );
		this.menu.addWidget( this.wireframeButton );
		this.menu.addWidget( this.backButton );
		
		ouzel.sceneManager.scene = this.scene;
	}
	function onGamepadEvent( type, e )
	{
		if( type == ouzel.EventType.GAMEPAD_BUTTON_CHANGE )
		{
			if( e.pressed && e.button == ouzel.input.GamepadButton.FACE_RIGHT )
			{
				_G.curScene.eventHandler.dispose();
				_G.curScene = new MainMenu();
			}
		}
		return true;
	}
	function onUIEvent( type, e )
	{
		if( type == ouzel.EventType.CLICK_NODE )
		{
			if( e.node === this.backButton )
			{
				_G.curScene.eventHandler.dispose();
				_G.curScene = new MainMenu();
			}
			else if( e.node === this.hideButton )
			{
				this.character.hidden = !this.character.hidden;
			}
			else if( e.node === this.wireframeButton )
			{
				this.camera.wireframe = !this.camera.wireframe;
			}
		}
		return true;
	}
	function onKeyboardEvent( type, e )
	{
		if( type == ouzel.EventType.KEY_PRESS )
		{
			if( e.key == ouzel.input.KeyboardKey.ESCAPE || e.key == ouzel.input.KeyboardKey.MENU )
			{
				_G.curScene.eventHandler.dispose();
				_G.curScene = new MainMenu();
			}
		}
		return true;
	}
}
class GUISample
{
	function __construct()
	{
		this.
		{
			eventHandler = ouzel.createEventHandler().
			{
				onGamepadEvent = bind( this, this.onGamepadEvent ),
				onUIEvent = bind( this, this.onUIEvent ),
				onKeyboardEvent = bind( this, this.onKeyboardEvent ),
			},
			
			scene = ouzel.createScene(),
			guiCamera = ouzel.createCamera(),
			guiLayer = ouzel.createLayer(),
			menu = ouzel.createMenu(),
			
			button = ouzel.createButton( "button.png", "button_selected.png", "button_down.png", "", "Button", "arial.fnt", 0, ouzel.Color.RED, ouzel.Color.RED, ouzel.Color.BLACK ).
			{
				position = vec2( -200, 100 ),
			},
			fullscreenButton = ouzel.createButton( "button.png", "button_selected.png", "button_down.png", "", "Fullscreen", "arial.fnt", 0, ouzel.Color.BLACK, ouzel.Color.BLACK, ouzel.Color.BLACK ).
			{
				position = vec2( -200, 40 ),
			},
			backButton = ouzel.createButton( "button.png", "button_selected.png", "button_down.png", "", "Back", "arial.fnt", 0, ouzel.Color.BLACK, ouzel.Color.BLACK, ouzel.Color.BLACK ).
			{
				position = vec2( -200, -200 ),
			},
			
			checkBox = ouzel.createCheckBox( "checkbox.png", "", "", "", "tick.png" ).
			{
				position = vec2( -100, 100 ),
			},
			
			label1 = ouzel.createLabel( "checkbox", "AmosisTechnik.ttf", 24.0 ).
			{
				color = ouzel.Color.CYAN,
				position = vec2( -28, 102 ),
			},
			label2 = ouzel.createLabel( ouzel.getString("Ouzel"), "ArialBlack.fnt" ).
			{
				position = vec2( 10, 0 ),
			},
			label3 = ouzel.createLabel( "UTF-8 ĀāČč\nNew line", "ArialBlack.fnt", 0.0, ouzel.Color.WHITE, vec2(0, 0.5) ).
			{
				color = ouzel.Color.BLUE,
				position = vec2( -100, -100 ),
				scale = vec3( 0.5, 0.5, 1 ),
			},
		};
		
		this.guiLayer.addChild( this.guiCamera );
		this.scene.addLayer( this.guiLayer );
		this.guiLayer.addChild( this.menu );
		
		this.menu.addWidget( this.button );
		this.menu.addWidget( this.checkBox );
		this.menu.addWidget( this.fullscreenButton );
		this.menu.addWidget( this.label1 );
		
		ouzel.addLanguage( "latvian", "lv.mo" );
		ouzel.setLanguage( "latvian" );
		
		this.menu.addWidget( this.label2 );
		this.menu.addWidget( this.label3 );
		this.menu.addWidget( this.backButton );
		
		ouzel.sceneManager.scene = this.scene;
	}
	function onGamepadEvent( type, e )
	{
		if( type == ouzel.EventType.GAMEPAD_BUTTON_CHANGE )
		{
			if( e.pressed && e.button == ouzel.input.GamepadButton.FACE_RIGHT )
			{
				_G.curScene.eventHandler.dispose();
				_G.curScene = new MainMenu();
			}
		}
		return true;
	}
	function onUIEvent( type, e )
	{
		if( type == ouzel.EventType.CLICK_NODE )
		{
			if( e.node === this.backButton )
			{
				_G.curScene.eventHandler.dispose();
				_G.curScene = new MainMenu();
			}
			else if( e.node === this.button )
			{
				this.checkBox.checked = !this.checkBox.checked;
			}
			else if( e.node === this.fullscreenButton )
			{
				ouzel.window.fullscreen = !ouzel.window.fullscreen;
			}
		}
		return true;
	}
	function onKeyboardEvent( type, e )
	{
		if( type == ouzel.EventType.KEY_PRESS )
		{
			if( e.key == ouzel.input.KeyboardKey.ESCAPE || e.key == ouzel.input.KeyboardKey.MENU )
			{
				_G.curScene.eventHandler.dispose();
				_G.curScene = new MainMenu();
			}
		}
		return true;
	}
}

global curScene = new MainMenu();
